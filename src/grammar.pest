// Keywords List ===============================================================
kw_def = @{ "def" }
kw_break = @{ "break" }
kw_new = @{ "new" }
kw_for = @{ "for" }
kw_if = @{ "if" }
kw_else = @{ "else" }
kw_print = @{ "print" }
kw_read = @{ "read" }
kw_return = @{ "return" }

kw_paren_open = @{ "(" }
kw_paren_close = @{ ")" }

kw_bracket_open = @{ "[" }
kw_bracket_close = @{ "]" }

kw_cur_bracket_open = @{ "{" }
kw_cur_bracket_close = @{ "}" }

kw_int = @{ "int" }
kw_float = @{ "float" }
kw_string = @{ "string" }
kw_null = @{ "null" }

kw_comma = @{ "," }
kw_semicolon = @{ ";" }
kw_attrib = @{ "=" }

kw_plus = @{ "+" }
kw_minus = @{ "-" }
kw_mult = @{ "*" }
kw_div = @{ "/" }
kw_mod = @{ "%" }

kw_lt = @{ "<" }
kw_gt = @{ ">" }
kw_lte = @{ "<=" }
kw_gte = @{ ">=" }
kw_eq = @{ "==" }
kw_ne = @{ "!=" }
// Non Trivial Terminals =======================================================

ident = @{ (ASCII_ALPHA | "_") ~ ident_inner | (ASCII_ALPHA | "_") }
ident_inner = { (ASCII_ALPHANUMERIC | "_") ~ ident_inner | (ASCII_ALPHANUMERIC | "_") }

int_constant = @{ ASCII_DIGIT+ }

// ask teacher if need to convert from BNF
float_constant = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+) ~ (("e"|"E") ~ ("+"|"-")? ~ ASCII_DIGIT+)? }

string_constant = ${ "\"" ~ s_char_sequence? ~ "\""}

s_char_sequence = @{ (s_char ~ s_char_sequence) | s_char }

s_char = @{ (!("\"" | "\\" | NEWLINE) ~ ANY) | s_char_sequence_escape }

s_char_sequence_escape = @{ "\\'" | "\\\"" | "\\?" | "\\\\'" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" }

// Tokens Recognizer ===========================================================
tokens = {
    SOI ~ (
        kw_def | kw_break | kw_new | kw_for | kw_if | kw_else | kw_print | kw_read | kw_return |
        kw_paren_open | kw_paren_close | kw_bracket_open | kw_bracket_close | kw_cur_bracket_open | kw_cur_bracket_close |
        kw_int | kw_float | kw_string | kw_null |
        kw_comma | kw_semicolon |
        kw_plus | kw_minus | kw_mult | kw_div | kw_mod |
        kw_lte | kw_gte | kw_lt | kw_gt |
        // Fix Non BackTrack
        kw_eq | kw_ne | kw_attrib |
        float_constant| int_constant | string_constant | ident
    )*
    ~ EOI
}
// Grammar Definition ==========================================================
program = { SOI ~ (statement | funclist) ~ EOI  | SOI  ~ EOI }

funclist = {(funcdef ~ funclist) | funcdef }

funcdef = {
    (kw_def ~ ident ~ kw_paren_open ~ paramlist ~ kw_paren_close ~ kw_cur_bracket_open ~ statelist ~ kw_cur_bracket_close) | 
    (kw_def ~ ident ~ kw_paren_open ~ kw_paren_close ~ kw_cur_bracket_open ~ statelist ~ kw_cur_bracket_close)
}

paramlist = {(((kw_int | kw_float | kw_string) ~ ident ~ kw_comma ~ paramlist) | ((kw_int | kw_float | kw_string) ~ ident))}

statement = {
    vardecl ~ kw_semicolon |
    atribstat ~ kw_semicolon |
    printstat ~ kw_semicolon |
    readstat ~ kw_semicolon |
    returnstat ~ kw_semicolon |
    ifstat|
    forstat|
    kw_cur_bracket_open ~ statelist ~ kw_cur_bracket_close |
    kw_break ~ kw_semicolon |
    kw_semicolon
}

vardecl = {
    (kw_int | kw_float | kw_string) ~ ident ~ vardecl_array |
    (kw_int | kw_float | kw_string) ~ ident
    }

vardecl_array = {
    (kw_bracket_open ~ int_constant ~ kw_bracket_close) ~ vardecl_array |
    (kw_bracket_open ~ int_constant ~ kw_bracket_close)    
    }

atribstat = { lvalue ~ kw_attrib ~ (funccall | allocexpression | expression)}

funccall = {
    (ident ~ kw_paren_open ~ paramlistcall ~ kw_paren_close) | 
    (ident ~ kw_paren_open ~ kw_paren_close) 
    }

paramlistcall = { ((ident ~ kw_comma ~ paramlistcall) | ident) }

printstat = { kw_print ~ expression }

readstat = { kw_read ~ lvalue }

returnstat = { kw_return }

ifstat = { 
    (kw_if ~ kw_paren_open ~ expression ~ kw_paren_close ~ statement ~ (kw_else ~ statement)) |
    (kw_if ~ kw_paren_open ~ expression ~ kw_paren_close ~ statement)
    }

forstat = { kw_for ~ kw_paren_open ~ atribstat ~ kw_semicolon ~ expression ~ kw_semicolon ~ atribstat ~ kw_paren_close ~ statement }

statelist = { statement ~ statelist | statement }

allocexpression = { kw_new ~ (kw_int | kw_float | kw_string) ~ numexpression_array }

expression = { 
    (numexpression ~ ((kw_lte | kw_gte | kw_lt | kw_gt | kw_eq | kw_ne) ~ numexpression)) |
    (numexpression)
    }

numexpression = { 
    term ~ add_subtract_term |
    term
    }

add_subtract_term = {
    ((kw_plus | kw_minus) ~ term) ~ add_subtract_term |
    ((kw_plus | kw_minus) ~ term)
}

term = { unaryexpr ~ term_mult_div_mod | unaryexpr }

term_mult_div_mod = {
    ((kw_mult | kw_div | kw_mod) ~ unaryexpr) ~ term_mult_div_mod |
    ((kw_mult | kw_div | kw_mod) ~ unaryexpr)
}

unaryexpr = { (kw_plus | kw_minus)  ~ factor | factor }

factor = { float_constant | int_constant | string_constant | kw_null | lvalue | (kw_paren_open ~ numexpression ~ kw_paren_close) }

lvalue = { ident ~ numexpression_array | ident }

numexpression_array = {
    ((kw_bracket_open ~ numexpression ~ kw_bracket_close) ~ numexpression_array) | 
    (kw_bracket_open ~ numexpression ~ kw_bracket_close)
}
// Pest Specific Config

WHITESPACE = _{ " " | "\t" | NEWLINE }