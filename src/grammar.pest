program = { SOI ~ (statement | funclist)? ~ EOI }

ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

int_constant = @{ ASCII_DIGIT+ }

float_constant = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (("e"|"E") ~ ("+"|"-")? ~ ASCII_DIGIT+)? }

string_constant = ${ "\"" ~ s_char_sequence ~ "\""}

s_char_sequence = @{ (s_char ~ s_char_sequence) | s_char }

s_char = @{ (!("\"" | "\\" | NEWLINE) ~ ANY) | s_char_sequence_escape }

s_char_sequence_escape = @{ "\\'" | "\\\"" | "\\?" | "\\\\'" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v" }

funclist = {(funcdef ~ funcdef) | funcdef }

//Verify concatenated characters
funcdef = {"def" ~ ident ~ "(" ~ paramlist ~ ")" ~ "{" ~ statelist ~ "}"}

paramlist = {((("int" | "float" | "string") ~ ident ~ "," ~ paramlist) | (("int" | "float" | "string") ~ ident))?}

statement = {
    vardecl ~ ";" |
    atribstat ~ ";" |
    printstat ~ ";" |
    readstat ~ ";" |
    returnstat ~ ";" |
    ifstat|
    forstat|
    "{" ~ statelist ~ "}" |
    "break;" |
    ";"
}

vardecl = {("int" | "float" | "string") ~ ident ~ ("[" ~ int_constant ~ "]")*}

atribstat = { lvalue ~ "=" ~ (funccall | allocexpression | expression)}

funccall = { ident ~ "(" ~ paramlistcall ~ ")" }

paramlistcall = { ((ident ~ "," ~ paramlistcall) | ident)? }

printstat = { "print" ~ expression }

readstat = { "read" ~ lvalue }

returnstat = { "return" }

//Verify concatenated characters
ifstat = { "if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)? }

//Verify concatenated characters
forstat = { "for" ~ "(" ~ atribstat ~ ";" ~ expression ~ ";" ~ atribstat ~ ")" ~ statement }

statelist = { statement ~ (statelist)? }

allocexpression = { "new" ~ ("int" | "float" | "string") ~ ("[" ~ numexpression ~ "]")+ }

//Changed Order and Resolve Non Backtracking
expression = { numexpression ~ (("<=" | ">="| "<" | ">" | "==" | "!=") ~ numexpression)? }

numexpression = { term ~ (("+" | "-") ~ term)* }

term = { unaryexpr ~ (("*" | "/" | "%") ~ unaryexpr)* }

unaryexpr = { ("+" | "-")? ~ factor }

factor = { float_constant | int_constant | string_constant | "null" | lvalue | ("(" ~ numexpression ~ ")") }

lvalue = { ident ~ ("[" ~ numexpression ~ "]")* }

WHITESPACE = _{ " " | "\t" | NEWLINE }